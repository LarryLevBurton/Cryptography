/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Laurence Burton 
 */
public class prac extends javax.swing.JFrame {

    /**
     * Creates new form prac
     */
    public prac() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputObject = new javax.swing.JTextField();
        checkButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        commentsObject = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        aObject = new javax.swing.JLabel();
        bObject = new javax.swing.JLabel();
        iObject = new javax.swing.JLabel();
        jObject = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        syndromeObject = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        outputObject = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        pObject = new javax.swing.JLabel();
        qObject = new javax.swing.JLabel();
        rObject = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        checkButton.setText("Check");
        checkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkButtonMouseClicked(evt);
            }
        });
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        commentsObject.setColumns(20);
        commentsObject.setRows(5);
        commentsObject.setText("Comments");
        jScrollPane1.setViewportView(commentsObject);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("A:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("B:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("J");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("I:");

        aObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        aObject.setText("0");

        bObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bObject.setText("0");

        iObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        iObject.setText("0");

        jObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jObject.setText("0");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Syn:");

        syndromeObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        syndromeObject.setText("0000");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Output:");

        outputObject.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        outputObject.setText("0000000000");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("P:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("Q:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("R:");

        pObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pObject.setText("0");

        qObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        qObject.setText("0");

        rObject.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rObject.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(iObject)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aObject)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jObject)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bObject))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pObject)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(qObject)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rObject))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(syndromeObject))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(outputObject))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(inputObject, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputObject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(syndromeObject))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pObject, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(qObject)
                        .addComponent(jLabel15)
                        .addComponent(rObject)))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(aObject)
                    .addComponent(jLabel2)
                    .addComponent(bObject)
                    .addComponent(jLabel4)
                    .addComponent(iObject)
                    .addComponent(jLabel3)
                    .addComponent(jObject))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(outputObject))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*  
    Description:    This function is called when the user selects
                    the check button. It will then check if the number
                    They've inputted in valid if it isn't I'll 
                    correct up to 2 errors. 
    Parameters:     args the command line arguments  
    Returns:        void
    Author(s):      Laurence Burton (15003639)  
*/  
    private void checkButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkButtonMouseClicked
        int[] d = new int[10];
        int[] s = new int[4];
        
        setup();
        int temp, zeroes,p,q,r,i,j,b,a;
        temp = zeroes = 0;
        String text = inputObject.getText().replaceAll("[^\\d.]", "");
        
        //Check is input is 10 characters 
        if(text.length() == 10){   
            //Loops through input
            for(int k = 0; k< 10; k++){
                        //read numbers into array as ints
                        d[k]=Integer.parseInt(String.valueOf(text.charAt(k)));
            }
            //Generate syndromes
            s[0] = ((d[0]+d[1]+d[2]+d[3]+d[4]+d[5]+d[6]+d[7]+d[8]+d[9])%11);
            s[1] = (((d[0]*1)+(d[1]*2)+(d[2]*3)+(d[3]*4)+(d[4]*5)+(d[5]*6)+(d[6]*7)+(d[7]*8)+(d[8]*9)+(d[9]*10))%11);
            s[2] = (((d[0]*1)+(d[1]*4)+(d[2]*9)+(d[3]*5)+(d[4]*3)+(d[5]*3)+(d[6]*5)+(d[7]*9)+(d[8]*4)+(d[9]))%11);
            s[3] = (((d[0])+(d[1]*8)+(d[2]*5)+(d[3]*9)+(d[4]*4)+(d[5]*7)+(d[6]*2)+(d[7]*6)+(d[8]*3)+(d[9]*10))%11);
            
            //Output Syndroms to lable
            syndromeObject.setText(s[0]+""+s[1]+""+s[2]+""+s[3]+""); 

            //Loops through syndromes
            for (int k = 0; k < 4; k++) {
                //Checks if any syndromes is greater then 11.
               if(s[k] > 10){
                    commentsObject.setText("There are more then 2 errors.");                       
                  return;
               } else if (s[k] == 0) {
                   zeroes++;
               }
            }
            //Checks if all 4 sysdromes equal 0: This means there are no errors. 
            if (zeroes == 4) {
                commentsObject.setText("You have got no errors.");
                outputObject.setText(d[0]+""+d[1]+""+d[2]+""+d[3]+""+d[4]+""+d[5]+""+d[6]+""+d[7]+""+d[8]+""+d[9]+"");
            } else {      
                //Generates P, Q and R
                p = generateP(s[0],s[1],s[2]);
                q = generateQ(s[0],s[1],s[2],s[3]);
                r = generateR(s[1],s[2],s[3]);
                
                
                pObject.setText(p + ""); //P        
                qObject.setText(q + ""); //Q
                rObject.setText(r+ ""); //R

                 //Checks if P, Q and R is equal to 0. If they are then there is only 1 error. 
                if(p == 0 && q == 0 && r == 0){
                    commentsObject.setText("You have got 1 error");
                    //Gets the error magnotide
                    a = s[0];
                    
                    int temp1 = (s[0]%11);
                    int temp2 = lookup[4][temp1];
                    
                    //Gets to the position of the error
                    i = (s[1]*temp2)%11;
                    
                    
                    if(i <= 0 || i>= 10){
                        commentsObject.setText("You have got more then 2 errors");
                    }else{
                        //fixes error
                        d[i-1] = (d[i-1]-(a));

                        iObject.setText(i+""); //I
                        aObject.setText(a+"");//A
                        outputObject.setText(d[0]+""+d[1]+""+d[2]+""+d[3]+""+d[4]+""+d[5]+""+d[6]+""+d[7]+""+d[8]+""+d[9]+""); //Output

                    }
               
                 //If P, Q and R don't ALL equal 0 then you have more then 1 error
                }else{
                    
                    i = generateI(p, q, r);
                    iObject.setText(i+""); 
                    j = generatej(p,q,r);
                    jObject.setText(j+"");

                    b = generateB(i, s[0],s[1],j);
                    bObject.setText(b+""); 
                    a = generateA(s[0],b);
                    aObject.setText(a+"");

                     //If I or J are less then 0 there is more then 2 errors. 
                    if(i <= 0 || j <= 0){
                       commentsObject.setText("There are more then 2 errors and there is no square root.");                       
                    }else{                       
                        i -=1;
                        j -=1;
                        d[i] = mod11(d[i]-a);
                        d[j] = mod11(d[j]-b);
                        if(d[i] >= 10 || d[j] >= 10){
                            commentsObject.setText("You had more then two errors");
                        }else{
                            commentsObject.setText("You had two errors");
                            outputObject.setText(d[0]+""+d[1]+""+d[2]+""+d[3]+""+d[4]+""+d[5]+""+d[6]+""+d[7]+""+d[8]+""+d[9]+""); 
                        }
                    }
                } 
            }
        } else {
            commentsObject.setText("Please enter a 6 digit number");
        }
    }//GEN-LAST:event_checkButtonMouseClicked

    
    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkButtonActionPerformed
    
/*  
    Description:    Setups up UI
    Parameters:     void 
    Returns:        void
    Author(s):      Laurence Burton (15003639)  
*/      
    public void setup(){
        aObject.setText("0"); //A       
        bObject.setText("0"); //B
        iObject.setText("0"); //I
        jObject.setText("0"); //J
        syndromeObject.setText("0"); //Syn
        outputObject.setText("0"); //Output       
        pObject.setText("0"); //Output        
        qObject.setText("0"); //Output
        rObject.setText("0"); //Output
    }
/*  
    Description:    Generate P using
                    P= S2^2  - S1 S3
    Parameters:     int S1,int S2 and int S3
    Returns:        int P
    Author(s):      Laurence Burton (15003639)  
*/      
    public int generateP(int s1, int s2, int s3){
        int s2Squared = lookup[2][((s2)%11)];
        int s1TakeS3 = mod11(s1*s3);
        int p = mod11(s2Squared - s1TakeS3);
        return p;
    }
/*  
    Description:    Generate Q using
                    Q = S1 S4 - S2 S3          
    Parameters:     int S1,int S2, int S3 and int S4
    Returns:        int Q
    Author(s):      Laurence Burton (15003639)  
*/
    public int generateQ(int s1, int s2, int s3, int s4){
        int s1TimesS4 = mod11(s1*s4);
        int s2TimesS3 = mod11(s2*s3);
        int q = mod11(s1TimesS4 - s2TimesS3);
        return q;
    }
/*  
    Description:    Generate R using
                    R = S3^2  - S2 S4               
    Parameters:     int S2, int S3 and int S4
    Returns:        int R
    Author(s):      Laurence Burton (15003639)  
*/
    public int generateR(int s2, int s3, int s4){
        int s3Squared = lookup[2][((s3)%11)];
        int s2TimesS4 = mod11(s2*s4);
        int r = mod11(s3Squared - s2TimesS4);

        return r;
    }
    
/*  
    Description:    Generate I using
                    i = (- Q + √(Q2-4*P*R)) / 2*P               
    Parameters:     int p, int q and int r
    Returns:        int I
    Author(s):      Laurence Burton (15003639)  
*/
    public int generateI(int p, int q, int r){
            //Sqaure Q
            int squaredQ = sqaureNumber(q);
            //subtract 4 from q^2 and time it by p*r
            int sum = (squaredQ-(4*(p*r)));
            int squareRoot = sqaureRoot(sum);

            if(squareRoot == -1){
               commentsObject.setText("There are more then 2 error");
               return squareRoot;
            }
            
            sum = (-q) + squareRoot;
            int inverseVar = inverseNumber(p*2);
            int i = ( sum )*inverseVar;//(temp1 * temp2)%11;
            return mod11(i);
    }
    
/*  
    Description:    Generate J using
                    j = (- Q -  √(Q2-4*P*R)) / 2*P
    Parameters:     int p, int q and int r
    Returns:        int j
    Author(s):      Laurence Burton (15003639)  
*/
       public int generatej(int p, int q, int r){
           //Sqaure Q
            int squaredQ = sqaureNumber(q);
            //subtract 4 from q^2 and time it by p*r
            int sum = (squaredQ-(4*(p*r))); 
            int squareRoot = sqaureRoot(sum);
            if(squareRoot == -1){
               commentsObject.setText("There are more then 2 error");
               return squareRoot;
            }
            sum = (-q) - squareRoot;
            int inverseVar = inverseNumber(p*2);
            int i = ( sum )*inverseVar;//(temp1 * temp2)%11;
            return mod11(i);
    }
  
       
     /* 
    Description:    Generate A using
                    a = s1 – b
    Parameters:     int i, int s1, int s2 and int j
    Returns:        int A
    Author(s):      Laurence Burton (15003639)  
*/       
    public int generateA(int s1,int b){
        int a = s1 - b;
        return mod11(a);
    }      

    public int generateB(int i, int s1, int s2 ,int j){
        
        int tempA = (i*s1);
        int tempB = tempA - s2;
        int tempC = mod11(i - j);
        int b = tempB * inverseNumber(tempC);
        return mod11(b);
    }

    public int[][] lookup = { 
           {0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, //0: x
           {0,10, 9, 8, 7, 6, 5, 4, 3, 2, 1}, //1: -x
           {0,1, 4, 9, 5, 3, 3, 5, 9, 4, 1},  //2: x^2
           {0,1, -1, 5, 2, 4, -1, -1, -1, 3, -1},  //3: square root of x
           {0,1, 6, 4, 3, 9, 2, 8, 7, 5, 10}  //4:x^-1(inverse)
        }; 

    
/* 
    Description:    subtracts two number 
                    and mods the results by 12.
    Parameters:     int a and int b
    Returns:        int result
    Author(s):      Laurence Burton (15003639)  
*/       
    public int subtract(int a, int b){
        return (a + (-b))%12;
    }
/* 
    Description:    generates a squared number
                    under mod 11
    Parameters:     int x
    Returns:        int result
    Author(s):      Laurence Burton (15003639)  
*/    
    public int sqaureNumber(int x){
        x = mod11(x);;
        x = lookup[2][x];
        return x;
                
    }
 /* 
    Description:    generates a inverse of a number
                    under mod 11
    Parameters:     int x
    Returns:        int result
    Author(s):      Laurence Burton (15003639)  
*/      
    public int inverseNumber(int x){
        return lookup[4][mod11(x)];
    }
    
     /* 
    Description:    generates the square number
                    under mod 11
    Parameters:     int x
    Returns:        int result
    Author(s):      Laurence Burton (15003639)  
*/      
    public int sqaureRoot(int x){

        x = mod11(x);
        x = lookup[3][x];

        if (x == -1){
            return x;
        }
        return x;
    }
    
/* 
    Description:    Mods a number by 11 
    Parameters:     int x
    Returns:        int result
    Author(s):      Laurence Burton (15003639)  
*/      
    public int mod11(int x){
        x = x%11;
        if (x < 0){
            x = Math.abs(x);
            x = lookup[1][x];
        }
              System.out.print(" " + x);

        return x;
    }
    

    
    /* 
    Description:    Divides number a by B using 
                    mod 11.
    Parameters:     int a and int b
    Returns:        int result
    Author(s):      Laurence Burton (15003639)  
*/   
    public int divide(int a, int b){
        return a *(-b);
    }
   /*  
    Description:    This is the main function for task 2.
                    It's used to declare variables for 
                    the user interface. 
    Parameters:     args the command line arguments  

    Returns:        void
    Author(s):      Laurence Burton (15003639)  
*/   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new prac().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aObject;
    private javax.swing.JLabel bObject;
    private javax.swing.JButton checkButton;
    private javax.swing.JTextArea commentsObject;
    private javax.swing.JLabel iObject;
    private javax.swing.JTextField inputObject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jObject;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel outputObject;
    private javax.swing.JLabel pObject;
    private javax.swing.JLabel qObject;
    private javax.swing.JLabel rObject;
    private javax.swing.JLabel syndromeObject;
    // End of variables declaration//GEN-END:variables
}
